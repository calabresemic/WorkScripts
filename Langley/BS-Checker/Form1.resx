<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAHyAAAAEAIAAoEAAAFgAAACgAAAAfAAAAQAAAAAEAIAAAAAAAgA8AACMuAAAjLgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkrm7AIq/wQKcsbIen6OlWaCYmpqgjY7LoISF6p96
        e/mggIH+oH5/+Z+Bg+qgj5DLoJmbmqClplmcsLIdicDCAZG5uwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACWr7EAj7O0Ap6rrS+gmpuJn3+B1Z90dfeeY2T/nmNk/59l
        Zv+aNTX/n2do/55eX/+bQ0T/nmRl/55jZP+fcXL3oIOE1KCanIeeq60tjba4ApWvsQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIKcnQCsrK4AnKutG6CbnYafeHnmnmRl/55jZP+faGn/oHh5/6F9
        fv+heHr/mTY2/59sbf+heXr/oHN1/59pav+gdnj/n2xt/55fX/+dXF3/n3t95KCcnYKcrK4Zp6yuAIGd
        ngAAAAAAAAAAAAAAAAAAAAAAAAAAAJKhogByqasBn6eoQqCMjcieZGX+m0hJ/51ZWv+ig4T/oHBx/6Bx
        cv+gcXP/oW1u/6BjZP+jdHX/onV2/6FzdP+gb3D/n2hp/59naP+eYmP/nVdY/55jZP+fbW7+oIqMxJ+n
        qTwUp6gAkaCiAAAAAAAAAAAAAAAAAJWgoQCJq6wCoKKkXaB+f+afZmf/n21u/5xTVP+famv/n2pr/6Bz
        dP+gc3X/mmJj/4VYWf9vREX/ajo7/3U/QP+TUFD/n2Nk/6Bxcv+gcnT/oG9w/59qa/+gdnf/oHFy/59m
        Z/+ggYPin6WnVX2oqQGUn6AAAAAAAJObnABlq6wBoKKkX6B5e+6aPD3/oHV2/6F9fv+fbG3/oXl7/59o
        av+aPz//mCEi/4oWFv9MMzP/GBgY/wMCAv8JAAD/bw8P/5gXF/+XIiL/mkBB/59qa/+gdnj/n21u/6KB
        g/+gc3X/nl9g/59yc+qfpKZX/6+8AJGYmgCsq60An6SmSaCAgeifZWb/nVVW/5o5Ov+fbG3/oHR2/5pB
        Qf+WGhr/lhUV/5YWFv+UFhb/XCsr/yAiIv8DBAT/EQQE/4EVFf+YFxf/lhYW/5YVFf+WGxv/m0ND/6B0
        df+fbW7/nmVm/5k3N/+dVFX/oICC5J+lp0GoqaoAnaipKKGKjM+eY2T/nmNk/51WV/+cUFH/n2ps/5go
        KP+VFBT/lhcX/5YXF/+WFxf/mBYW/4EkJP84Ly//FRYW/xEPD/9YGBj/lBYW/5YXF/+WFxf/lhcX/5YV
        Ff+YKir/n25v/51aW/+dW1z/n29w/59oaf+hj5HInKepI6GeoKucUFH/nVla/59tbv+famv/n2pr/5Yf
        H/+hLi7/t2Rj/65NTf+uTk7/q1BQ/6BYV/+nUVH/Zz8//z9AQP8SExP/NiEh/4sXF/+XFxf/lhcX/5YX
        F/+WFxf/lhUV/5cjI/+fbG7/n21u/6BvcP+dWFn/nFRV/qGfoaSgoaOAn3d54ZpAQf+cUlL/oHJ0/5cl
        Jf+aHx//pTs7/8SBgf+vUFD/pTc3/5pCQv9aT0//NiIi/ywcHP9ERET/Dg8P/y0eHv+EFBT/lxcX/5YX
        F/+WFxf/lhcX/5YXF/+WFRX/mCco/6B1dv+cUVL/mkBA/592d+OgoaOFg6aoAZ6sri+gk5WmoYSF+5o5
        Of+VExP/pj08/8N9ff+vUFD/xICA/7VfX/+oQ0P/fDAw/0o5Of8gIiL/CAgI/xkbG/85IyP/jRgY/5cX
        F/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YVFf+aPDz/oYSG+6CTlaWerK4xh6OkAmJubgCkqqwAn6qsUp5m
        Z/iWFxf/lhcX/5YYGP+uTU3/r1BQ/50oKP+3YmL/nysr/5YUFP9/JSX/ODAw/zQ3N/8sIyP/aRsb/5UW
        Fv+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhgY/55pavafq61Mo6mrAFJfXgCTl5gAkLy9BaCS
        lKeZMzP/lhUV/5YXF/+WFxf/lhgY/7BTU/+tTEz/nyws/7djY/+eKCf/kR0d/2EtLf9YLi7/cxoa/5UX
        F/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YVFf+ZNjb/oJSWoYnBwgOSlpcAnaKkAJ6w
        siefc3Tklxsb/5YXF/+WFxf/lhcX/5YXF/+XGRn/slZW/6tGRv+eMTL/s2Vm/5snJ/+RGhz/lRcX/5gX
        F/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lxwc/592d9+esbMinKGiAKSn
        qQCgpqhXnFRV/JYVFf+WFxf/lhcX/5YXF/+WFxf/lhYW/5gbG/+zWFj/n0xP/1iKo/9Vl7L/fzU9/5cV
        FP+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YVFf+cWFn6oKiqUKOn
        qQCvnJ4AoJydgZo+P/+WFRX/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFhb/mhwc/49rdf8jt+L/D7rr/3Br
        e/+ZHBz/lhYV/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFRX/mkFC/6Ce
        n3qroaMAAP//AKCTlZ2ZMjL/lhUV/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YWFv+OJCf/fH+O/19z
        iP+NSE//rFxe/5AmKf+TGRr/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhUV/5k0
        Nf+glpeW1FlcAIHt7wOgj5GomC0t/5YWFv+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lxYV/5Yg
        If+uWlv/gllj/0Kmx/9Li6f/kCAi/5YWFv+WFxf/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YW
        Fv+ZLzD/oJKToT///wFy//8CoJCSpZkuLv+WFhb/lhcX/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YX
        F/+WFhX/myYm/26El/8UwPD/KqLJ/4pOVv+ZGBf/lxYV/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YX
        F/+WFRX/mTEx/6CTlJ4A//8AxXd5AKCXmJKZNjf/lhUV/5YXF/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YX
        F/+WFxf/lhcX/5UWF/+TKy3/c4aY/3tIU/+VWWD/oVNW/4cnLP+WFxf/lhcX/5YXF/+WFxf/lhcX/5YX
        F/+WFxf/lhUV/5o6Ov+gmZuLtpCSAKilpwCgoaJvm0dI/5YVFf+WFxf/lhcX/5YXF/+WFxf/lhcX/5YX
        F/+WFxf/lhcX/5YXF/+WFxf/lhUV/5koKf+xWlv/UH+Z/y203P9han7/mBUV/5YXF/+WFxf/lhcX/5YX
        F/+WFxf/lhcX/5YVFf+bS0z/oKKkaKemqAChpacAn6utQJ1iY/SWFhb/lhcX/5YXF/+WFxf/lhcX/5YX
        F/+WFxf/lhcX/5YXF/+WFxf/lhcX/5YWFv+XFBT/kDc8/0yfvf8VuOf/VoKb/50+QP+WFhb/lhcX/5YX
        F/+WFxf/lhcX/5YXF/+WFxf/nmZn8Z+srjqgpaYAmZ2fAJu0thSggoTMlyMj/5YWFv+WFxf/lhcX/5YX
        F/+WFxf/lhcX/5YXF/+WFxf/lxYW/5AWFv+THx//mB0d/5UWFv+TNjr/dnaH/5UoKv+tT0//pjs7/5UV
        Fv+WFxf/lhcX/5YXF/+WFhb/mCUl/6CFh8eatbcQmJyeAIqNjgC9nZ8AoJ6gfZtISf+WFRX/lhcX/5YX
        F/+WFxf/lhcX/5YXF/+WFxf/kRUV/3EjI/9RMTH/UDw8/2JAQP+FMTH/lhgY/6E0NP+xVFP/myIi/69R
        Uf+kNzf/lRUV/5YXF/+WFxf/lhUV/5tLTP+goKJ3s6OlAIiKiwAAAAAAnqSmAJ6uryWffX7alyIi/5YW
        Fv+WFxf/lhcX/5YXF/+WFxf/lhcX/2giIv8yLy//Jigo/ykqKv8vMjL/Qz09/4U3N/+WFRX/pDg4/65P
        T/+aISH/r1FR/6ExMf+VFRX/lhYW/5cjI/+gf4HWna6wIZ2jpQAAAAAAAAAAAI6SkwDJpqkAoKKkbp1Z
        WvqWFxf/lhcX/5YXF/+WFxf/lxcX/4QVFf8zIiL/HR8f/y4uLv8hISH/IiIi/y4wMP9PODj/kiYm/50n
        J/+uTk7/slhY/6ExMf+3Y2P/oC8v/5YWFv+dXV75oKOlZ7mpqwCMj5AAAAAAAAAAAAAAAAAAmqGjAJmt
        rw2glZelm0RF/5YVFf+WFxf/lhcX/5gXF/96Gxv/NDAw/yssLP8TExP/JCQk/yMjI/8oKCj/OjQ0/5ZH
        R/+tSkr/rEpK/7hlZf++c3P/sVZW/6M0NP+aRkf/oJeZn5itrwuaoKIAAAAAAAAAAAAAAAAAAAAAAEZF
        RQCgqasAnayuHqCPkLqaQkL/lhYW/5YXF/+YFxf/fRkZ/ykiIv8gICD/Jycn/yUlJf8YGBj/KCgo/zwz
        M/+WQ0P/rUlJ/6xJSf+sSUn/vG9u/6Q2Nv+ZQUL/oJGStZysrhufqKoALCwsAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAdnx8AKOsrgCdrK0goJKUsJxRUv2XHBz/lhUV/5IaGv9hPT3/LC4u/yEhIf8ZGRn/MTEx/xse
        Hv9SKCj/mykp/58rK/+eKyr/nigo/58wMP+fW1v8oJOVq52srh2hq60AdHp6AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABba2sAoa2vAJutrxOgnqCDn3Fy65o5Of+XGhr/iyQk/0svL/81NTX/LS4u/yYk
        JP9LKir/fhMT/5YVFf+VExP/lhka/5k5Ov+ecXPpoJ6gfputrxGgrK4AUmdmAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACXra4AkbCyA5+qrDqhlZegnnFy55xLTP2QNDT/fjc3/3U3
        N/9vHx//jBwc/5kjI/+ZMTH/m0xN/Z9ydOWhlpidn6utN5CxsgOWrK4AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABfV1QCbs7UAlbe4Bp6usDSgoqN9oZGTvKGC
        hOSgeHn4oXV2/aB5evegg4XjoJKUuqCipHqerrAxlbe5BZq0tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP8AAf78AAB++AAAPuAAAB7AAAAGgAAABoAAAAIAAAAAAAAAAAAAAAAAAAAAwAAABoAA
        AAKAAAACgAAAAoAAAAKAAAACAAAAAAAAAAKAAAACgAAAAoAAAAKAAAACwAAABsAAAAbgAAAO4AAADvAA
        AB74AAA+/AAAfv4AAP7/gAP+
</value>
  </data>
</root>